unique(unlist(tw_visit_user$league)[duplicated(unlist(tw_visit_user$league[2]))])
unique(unlist(tw_visit_user$league[2])[duplicated(unlist(tw_visit_user$league[2]))])
delete_dup = function (x) {
if (is.null(unlist(x))) {
NA
} else {
unique(unlist(x)[duplicated(unlist(x))])
}
}
sapply(tw_visit_user$league[1:3], function(x) delete_dup(x))
x=tw_visit_user$league[2]
x=tw_visit_user$league[2]
unique(unlist(x)[duplicated(x))])
unique(unlist(x)[duplicated(x)])
x=tw_visit_user$league[2]
unique(unlist(x)[duplicated(x)])
x=tw_visit_user$league[2]
unique(unlist(x)[duplicated(unlist(tw_visit_user$league[2]))])
unique(unlist(x)[duplicated(unlist(x))])
delete_dup = function (x) {
if (is.null(unlist(x))) {
NA
} else {
unique(unlist(x)[duplicated(unlist(x))])
}
}
sapply(tw_visit_user$league[1:3], function(x) delete_dup(x))
x=tw_visit_user$league[1]
unique(unlist(x)[duplicated(unlist(x))])
tw_visit_user$league[1]
unlist(tw_visit_user$league[1])
deplicated(unlist(tw_visit_user$league[1]))
duplicated(unlist(tw_visit_user$league[1]))
delete_dup = function (x) {
if (is.null(unlist(x))) {
NA
} else {
unique(unlist(x)[!duplicated(unlist(x))])
}
}
sapply(tw_visit_user$league[1:3], function(x) delete_dup(x))
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
tw_visit_user[1:20,]
table(tw_visit_user$league)
delete_dup = function (x) {
if (is.null(unlist(x))) {
NA
} else {
unlist_list = unlist(x, recursive = FALSE)
unique(unlist_list[!duplicated(unlist_list)])
}
}
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
tw_visit_user[1:20,]
tw_visit_user[5,3]
unlist(tw_visit_user[5,3])
unlist(tw_visit_user[5,3], recursive = FALSE)
install.packages('rlist')
library('rlist')
list.flatten(tw_visit_user$league[5])
tw_visit_user = as.data.frame(table(tw_event_table$user_id))
names(tw_visit_user) = c('user_id', 'freq')
tw_visit_user$league = sapply(tw_visit_user$user_id, function(x) player_league(x))
head(tw_visit_user)
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
unlist(l.ex, recursive = FALSE)
unlist(l.ex, recursive = TRUE)
head(tw_visit_user)
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
head(tw_visit_user)
length(tw_visit_user$league[5])
class(tw_visit_user$league[5])
length(unlist(tw_visit_user$league[5])
length(unlist(tw_visit_user$league[5]))
length(unlist(tw_visit_user$league[5]))
length(unlist(tw_visit_user$league[3]))
as.data.frame(tw_visit_user$league[5])
as.data.frame(tw_visit_user$league[5], names = FALSE)
as.data.frame(tw_visit_user[5,])
tw_visit_user[1:20,]
nrow(tw_visit_user)
tw_visit_user[1:50,]
install.packages('splitstackshape')
library('splitstackshape')
tw_visit_user[1:50,]
test = cSplit(tw_visit_user, 'league', sep=',', 'long')
test[1:20,]
install.packages('tidyr')
library('tidyr')
test = unnest(tw_visit_user, league = strsplit(league, ', '))
test = unnest(tw_visit_user, league = strsplit(league, ','))
test = unnest(tw_visit_user, league = strsplit(unlist(tw_visit_user$league), ','))
test = unnest(tw_visit_user, league = strsplit(league, ','))
test = unnest(tw_visit_user, league = strsplit(as.character(tw_visit_user$league), ','))
test[1:20,]
test[8,]
test[9,]
test[6,]
class(tw_visit_user[5,3])
delete_dup = function (x) {
if (is.null(unlist(x))) {
NA
} else {
unlist_list = unlist(x, recursive = FALSE)
unlist(unique(unlist_list[!duplicated(unlist_list)]))
}
}
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
class(tw_visit_user[5,3])
head(tw_visit_user)
tw_visit_user[5,3]
unlist(tw_visit_user[5,3])
tw_visit_user$league = sapply(tw_visit_user$league, function(x) unlist(delete_dup(x)))
class(tw_visit_user[5,3])
tw_visit_user$league = sapply(tw_visit_user$league, function(x) unlist(x))
class(tw_visit_user[5,3])
tw_visit_user$league = sapply(tw_visit_user$league, function(x) as.character(x))
class(tw_visit_user[5,3])
tw_visit_user$league[3]
tw_visit_user$league[5]
unlist(tw_visit_user$league[5])
class(unlist(tw_visit_user$league[5]))
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
tw_visit_user$league = sapply(tw_visit_user$league, function(x) unlist(x))
class(tw_visit_user$league[5])
as.character(tw_visit_user$league[5])
delete_dup = function (x) {
if (is.null(unlist(x))) {
NA
} else {
unlist_list = unlist(x)
unique(unlist_list[!duplicated(unlist_list)])
}
}
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
class(tw_visit_user$league[5])
head(tw_visit_user)
delete_dup = function (x) {
if (is.null(unlist(x))) {
NA
} else {
unlist_list = unlist(x)
class(unique(unlist_list[!duplicated(unlist_list)]))
}
}
sapply(tw_visit_user$league, function(x) delete_dup(x))
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
class(tw_visit_user$league[5])
tw_visit_user$league[5]
delete_dup = function (x) {
if (is.null(unlist(x))) {
NA
} else {
unlist_list = unlist(x)
unique(unlist_list[!duplicated(unlist_list)])
}
}
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
tw_visit_user$league[5]
delete_dup = function (x) {
if (is.null(unlist(x))) {
NA
} else {
unlist_list = unlist(x)
unique(unlist_list[!duplicated(unlist_list)])
}
}
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
tw_visit_user$league[5]
tw_visit_user = as.data.frame(table(tw_event_table$user_id))
names(tw_visit_user) = c('user_id', 'freq')
tw_visit_user$league = sapply(tw_visit_user$user_id, function(x) player_league(x))
delete_dup = function (x) {
if (is.null(unlist(x))) {
NA
} else {
unlist_list = unlist(x)
unique(unlist_list[!duplicated(unlist_list)])
}
}
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
tw_visit_user$league[5]
class(tw_visit_user$league[5])
delete_dup = function (x) {
if (is.null(unlist(x))) {
NA
} else {
unlist_list = unlist(x)
result = unique(unlist_list[!duplicated(unlist_list)])
unlist(result)
}
}
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
tw_visit_user$league[5]
tw_visit_user$league = sapply(tw_visit_user$user_id, function(x) player_league(x))
delete_dup = function (x) {
if (is.null(unlist(x))) {
NA
} else {
unlist_list = unlist(x)
result = unique(unlist_list[!duplicated(unlist_list)])
unlist(result)
}
}
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
tw_visit_user$league[5]
unlist(tw_visit_user$league[5])
as.character(tw_visit_user$league[5])
test = unnest(tw_visit_user, league)
delete_dup = function (x) {
if (is.null(unlist(x))) {
'NA'
} else {
unlist_list = unlist(x)
result = unique(unlist_list[!duplicated(unlist_list)])
unlist(result)
}
}
tw_visit_user$league = sapply(tw_visit_user$user_id, function(x) player_league(x))
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
test = unnest(tw_visit_user, league)
test[6,]
test[5,]
head(test)
test[1:20,]
tw_visit_user = cSplit(tw_visit_user, 'league', sep=',', 'long')
help(table)
table(tw_visit_user$league)
as.data.frame(table(tw_visit_user$league))
tw_visit_user = cSplit(tw_visit_user, 'league', sep=',', 'long')
head(tw_visit_user)
tw_visit_user = unnest(tw_visit_user, league)
as.data.frame(table(tw_visit_user$league))
tw_visit_user = unnest(tw_visit_user, league)
head(tw_visit_user)
test = unnest(tw_visit_user, league)
head(test)
tw_visit_user$league = sapply(tw_visit_user$user_id, function(x) player_league(x))
delete_dup = function (x) {
if (is.null(unlist(x))) {
'NA'
} else {
unlist_list = unlist(x)
unique(unlist_list[!duplicated(unlist_list)])
}
}
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
test = unnest(tw_visit_user, league)
test[1:20,]
as.data.frame(table(test$league))
league_count = as.data.frame(table(test$league))
names(league_count)
names(league_count) = c('league', 'freq')
league_count = league_count[-order(league_count$freq),]
league_count
league_count = as.data.frame(table(test$league))
names(league_count) = c('league', 'freq')
league_count = league_count[order(-league_count$freq),]
league_count
head(tw_visit_user)
tw_visit_user = as.data.frame(table(tw_event_table$user_id))
names(tw_visit_user) = c('user_id', 'freq')
tw_visit_user$league = sapply(tw_visit_user$user_id, function(x) player_league(x))
delete_dup = function (x) {
if (is.null(unlist(x))) {
'NA'
} else {
unlist_list = unlist(x)
unique(unlist_list[!duplicated(unlist_list)])
}
}
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
test = unnest(tw_visit_user, league)
head(test)
league_count = as.data.frame(table(test$league))
names(league_count) = c('league', 'freq')
league_count = league_count[order(-league_count$freq),]
league_count
head(tw_visit_user)
subset(tw_visit_user, subset = (league == 'ㅗ'))
subset(tw_visit_user, subset=(league == 'bepro 테스트 리그'))
y = subset(tw_visit_user, subset=(league == 'bepro 테스트 리그'))
sapply(y, function(x) readable_user_id(x))
subset(tw_visit_user, subset=(league == 'bepro 테스트 리그'))
readable_user_id(11524)
readable_user_id(11597)
readable_user_id(11603)
league_count
subset(tw_visit_user, subset=(league == 'ㅗ'))
subset(tw_visit_user, subset=(league == ' ㅗ'))
tw_visit_user[1:50,]
tw_visit_user[1:100,]
tw_visit_user[1:200,]
test[1:200,]
tail(test)
readable_team_id(347)
readable_team_id(8677)
readable_team_id(867)
league_count
source('~/beproapp-analytics/detail_visit_analysis.R', echo=TRUE)
subset(tw_visit_user, subset=(league == '서울대학교 총장배'))
nrow(subset(tw_visit_user, subset=(league == '서울대학교 총장배')))
source('~/beproapp-analytics/detail_visit_analysis.R', echo=TRUE)
library('splitstackshape')
library('tidyr')
tw_visit_user = as.data.frame(table(tw_event_table$user_id))
names(tw_visit_user) = c('user_id', 'freq')
tw_visit_user$league = sapply(tw_visit_user$user_id, function(x) player_league(x))
delete_dup = function (x) {
if (is.null(unlist(x))) {
'NA'
} else {
unlist_list = unlist(x)
unique(unlist_list[!duplicated(unlist_list)])
}
}
tw_visit_user$league = sapply(tw_visit_user$league, function(x) delete_dup(x))
test[1:20,]
test = unnest(tw_visit_user, league)
head(test)
league_count = as.data.frame(table(test$league))
names(league_count) = c('league', 'freq')
league_count = league_count[order(-league_count$freq),]
league_count
test
test[1:100,]
class(test)
test = as.data.frame(test)
test[1:100,]
league_count = as.data.frame(table(test$league))
names(league_count) = c('league', 'freq')
league_count = league_count[order(-league_count$freq),]
league_count
source('~/beproapp-analytics/[model] get_media_db.R', echo=TRUE)
tw_view_event = tw_event_table[tw_event_table$event_type == 'view',]
video_regex = grep('*video*', tw_view_event$page_url)
video_table = tw_view_event[video_regex,c('page_url', 'user_id')]
video_table = video_table[order(video_table$page_url),]
head(video_table)
video_view_rank = as.data.frame(table(video_table$page_url))[order(-as.data.frame(table(video_table$page_url))$Freq),]
names(video_view_rank) = c('name', 'freq')
top10 = sapply(strsplit(as.character(video_view_rank$name[1:10]), '/'), function(x) x[3])
top10_name = sapply(top10, function(x) readable_video_id(x))
top10_name
top10
total_video_view_rank = as.data.frame(table(total_video_rawtable$page_url))
total_video_view_rank = total_video_view_rank[order(-total_video_view_rank$Freq),]
head(total_video_view_rank)
readable_video_match(66)
readable_video_team(73)
readable_video_team(53)
video_view_rank
readable_video_match(66)
readable_video_match(65)
readable_video_match(26)
readable_video_team(26)
readable_video_team(36)
readable_video_team(64)
readable_video_match(64)
readable_video_match(10)
readable_video_match(80)
readable_video_team(80)
video_view_rank
total_video_view_rank
readable_video_match(35)
readable_video_team(42)
test3[1:168,]
test3 = completeFun(session_table, 'user_id')
test3$session = rep(NA, nrow(test3))
test3$session_time = rep(NA, nrow(test3))
test3$time = as.POSIXct(strptime(test3$time, '%Y-%m-%d %H:%M:%S'))
set_session_info = function(df) {
for (i in 1:nrow(df)) {
j = i+1
if (j < nrow(df)) {
if (as.numeric(difftime(df[,'time'][i], df[,'time'][j]), units='secs') >= 1800) {
if (match(TRUE, is.na(df[,'session'])) == 1) {
df[,'session'][match(TRUE, is.na(df[,'session'])):i] = 1
df[,'session_time'][match(TRUE, is.na(df[,'session_time'])):i] = df[i,'time']
} else {
k = df[,'session'][match(TRUE, is.na(df[,'session']))-1] + 1
df[,'session'][match(TRUE, is.na(df[,'session'])):i] = k
df[,'session_time'][match(TRUE, is.na(df[,'session_time'])):i] = df[j,'time']
}
}
} else if (j == nrow(df)) {
if (match(TRUE, is.na(df[,'session'])) == 1) {
df[, 'session'][match(TRUE, is.na(df['session'])):j] = 1
df[,'session_time'][match(TRUE, is.na(df[,'session_time'])):j] = df[j,'time']
} else {
k = df[,'session'][match(TRUE, is.na(df[,'session']))-1] + 1
df[,'session'][match(TRUE, is.na(df[,'session'])):j] = k
df[,'session_time'][match(TRUE, is.na(df[,'session_time'])):j] = df[j,'time']
}
} else if (nrow(df) == 1) {
df[, 'session'][match(TRUE, is.na(df['session']))] = 1
df[,'session_time'][match(TRUE, is.na(df[,'session_time']))] = df[1,'time']
}
}
return(df)
}
completeFun = function(data, desiredCols) {
completeVec = complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
session_table = tw_event_table
refined_table = completeFun(session_table, 'user_id')
refined_table$session = rep(NA, nrow(refined_table))
refined_table$session_time = rep(NA, nrow(refined_table))
system.time(
for (i in unique(refined_table$user_id)[!is.na(unique(refined_table$user_id))]) {
newdf = set_session_info(filter(refined_table, user_id == as.integer(i)))
refined_table[refined_table$user_id==as.integer(i), 'session'] = newdf[newdf$user_id==as.integer(i), 'session']
refined_table[refined_table$user_id==as.integer(i), 'session_time'] = newdf[newdf$user_id==as.integer(i), 'session_time']
}
session_table = tw_event_table
test3 = completeFun(session_table, 'user_id')
test3$session = rep(NA, nrow(test3))
test3$session_time = rep(NA, nrow(test3))
test3$time = as.POSIXct(strptime(test3$time, '%Y-%m-%d %H:%M:%S'))
head(test3)
new_vector = test3$time[2:nrow(test3)]
new_vector = c(new_vector, as.POSIXct(strptime('1970-01-01 00:00:00', '%Y-%m-%d %H:%M:%S')))
test3 = cbind(test3, new_vector)
test3[1:168,]
test3$time_diff = as.numeric(difftime(test3$time, test3$new_vector))
test3[1:168,]
help(which)
which(test$time_diff > 1800)
which(test3$time_diff > 1800)
head(session_table)
head(tw_event_table)
set_session_info = function(df) {
for (i in 1:nrow(df)) {
j = i+1
if (j < nrow(df)) {
if (as.numeric(difftime(df[,'time'][i], df[,'time'][j]), units='secs') >= 1800) {
if (match(TRUE, is.na(df[,'session'])) == 1) {
df[,'session'][match(TRUE, is.na(df[,'session'])):i] = 1
df[,'session_time'][match(TRUE, is.na(df[,'session_time'])):i] = df[i,'time']
} else {
k = df[,'session'][match(TRUE, is.na(df[,'session']))-1] + 1
df[,'session'][match(TRUE, is.na(df[,'session'])):i] = k
df[,'session_time'][match(TRUE, is.na(df[,'session_time'])):i] = df[j,'time']
}
}
} else if (j == nrow(df)) {
if (match(TRUE, is.na(df[,'session'])) == 1) {
df[, 'session'][match(TRUE, is.na(df['session'])):j] = 1
df[,'session_time'][match(TRUE, is.na(df[,'session_time'])):j] = df[j,'time']
} else {
k = df[,'session'][match(TRUE, is.na(df[,'session']))-1] + 1
df[,'session'][match(TRUE, is.na(df[,'session'])):j] = k
df[,'session_time'][match(TRUE, is.na(df[,'session_time'])):j] = df[j,'time']
}
} else if (nrow(df) == 1) {
df[, 'session'][match(TRUE, is.na(df['session']))] = 1
df[,'session_time'][match(TRUE, is.na(df[,'session_time']))] = df[1,'time']
}
}
return(df)
}
completeFun = function(data, desiredCols) {
completeVec = complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
session_table = tw_event_table
refined_table = completeFun(session_table, 'user_id')
refined_table$session = rep(NA, nrow(refined_table))
refined_table$session_time = rep(NA, nrow(refined_table))
system.time(
for (i in unique(refined_table$user_id)[!is.na(unique(refined_table$user_id))]) {
newdf = set_session_info(filter(refined_table, user_id == as.integer(i)))
refined_table[refined_table$user_id==as.integer(i), 'session'] = newdf[newdf$user_id==as.integer(i), 'session']
refined_table[refined_table$user_id==as.integer(i), 'session_time'] = newdf[newdf$user_id==as.integer(i), 'session_time']
}
)
# 전체 영상 데이터 불러오기
head(session_table)
refined_table = completeFun(session_table, 'user_id')
refined_table$session = rep(NA, nrow(refined_table))
refined_table$session_time = rep(NA, nrow(refined_table))
system.time(
for (i in unique(refined_table$user_id)[!is.na(unique(refined_table$user_id))]) {
newdf = set_session_info(filter(refined_table, user_id == as.integer(i)))
refined_table[refined_table$user_id==as.integer(i), 'session'] = newdf[newdf$user_id==as.integer(i), 'session']
refined_table[refined_table$user_id==as.integer(i), 'session_time'] = newdf[newdf$user_id==as.integer(i), 'session_time']
}
)
head(refined_table)
library(dplyr)
system.time(
for (i in unique(refined_table$user_id)[!is.na(unique(refined_table$user_id))]) {
newdf = set_session_info(filter(refined_table, user_id == as.integer(i)))
refined_table[refined_table$user_id==as.integer(i), 'session'] = newdf[newdf$user_id==as.integer(i), 'session']
refined_table[refined_table$user_id==as.integer(i), 'session_time'] = newdf[newdf$user_id==as.integer(i), 'session_time']
}
)
head(refined_table)
head(tw_event_table)
head(refined_table)
select(filter(refined_table, user_id == as.integer(9985)), session)
select(filter(test3, user_id == as.integer(9985)), session)
select(filter(test2, user_id == as.integer(9985)), session)
test3 = completeFun(session_table, 'user_id')
test3$session = rep(NA, nrow(test3))
test3$session_time = rep(NA, nrow(test3))
test3$time = as.POSIXct(strptime(test3$time, '%Y-%m-%d %H:%M:%S'))
select(filter(test3, user_id == as.integer(9985)), session)
select(filter(test3, user_id == as.integer(9985)), session) = 1
