count_signup = count_signup[-c(1:13),]
names(count_signup) = c('date', 'num')
count_signup = as.data.frame(table(valid_user$created_day))
head(count_signup)
head(user_data)
user_signup_day = user_data[, c('id','created_day')]
names(user_signup_day) = c('user_id', 'created_day')
head(user_signup_day)
count_signup = as.data.frame(table(valid_user$created_day))
head(count_signup)
count_signup = as.data.frame(table(user_signup_day$created_day))
head(count_signup)
names(count_signup) = c('date', 'num')
a = lapply(user_data$created, function (x) extract_date_from_rawtable)
user_data$created_day = as.character(a)
user_signup_day = user_data[, c('id','created_day')]
names(user_signup_day) = c('user_id', 'created_day')
count_signup = as.data.frame(table(user_signup_day$created_day))
names(count_signup) = c('date', 'num')
head(count_signup)
user_data$created_day = lapply(user_data$created, function (x) extract_date_from_rawtable)
user_signup_day = user_data[, c('id','created_day')]
names(user_signup_day) = c('user_id', 'created_day')
count_signup = as.data.frame(table(user_signup_day$created_day))
head(user_signup_day)
user_data$created_day = sapply(user_data$created, function (x) extract_date_from_rawtable)
user_signup_day = user_data[, c('id','created_day')]
names(user_signup_day) = c('user_id', 'created_day')
head(user_signup_day)
user_data$created[1]
extract_date_from_created = function(x) {
y = strsplit(as.character(x), ' ')[1]
z = strsplit(as.character(y), '-')[1]
paste0(z[1], z[2], z[3])
}
user_data$created[1]
user_data$created_day = sapply(user_data$created, function (x) extract_date_from_rawtable)
user_signup_day = user_data[, c('id','created_day')]
names(user_signup_day) = c('user_id', 'created_day')
head(user_signup_day)
user_data$created_day = sapply(user_data$created, function (x) extract_date_from_rawtable)
head(user_data)
user_data$created_day = sapply(user_data$created, function (x) extract_date_from_created)
head(user_data)
extract_date_from_created = function(x) {
y = strsplit(as.character(x), ' ')[1]
z = strsplit(as.character(y), '-')[1]
paste0(z[1], z[2], z[3])
}
user_data$created_day = sapply(user_data$created, function (x) extract_date_from_created)
head(user_data)
user_data$created[1]
strsplit(user_data$created[1], ' ')
strsplit(user_data$created[1], ' ')[[1]][1]
strsplit(user_data$created[1], ' ')[[1]]
strsplit(strsplit(user_data$created[1], ' ')[[1]][1], '-')
strsplit(strsplit(user_data$created[1], ' ')[[1]][1], '-')[[1]][2]
extract_date_from_created = function(x) {
y = strsplit(as.character(x), ' ')[[1]][1]
z = strsplit(as.character(y), '-')[[1]]
paste0(z[1], z[2], z[3])
}
user_data$created_day = sapply(user_data$created, function (x) extract_date_from_created)
head(user_data)
extract_date_from_created = function(x) {
y = strsplit(as.character(x), ' ')[[1]][1]
z = strsplit(as.character(y), '-')[[1]]
paste0(z[1], z[2], z[3])
}
user_data$created_day = sapply(user_data$created, function (x) extract_date_from_created)
head(user_data)
extract_date_from_created = function(x) {
y = strsplit(as.character(x), ' ')[[1]][1]
z = strsplit(as.character(y), '-')[[1]]
paste0(z[1], z[2], z[3])
}
user_data$created_day = sapply(user_data$created, function (x) extract_date_from_created(x))
head(user_data)
user_signup_day = user_data[, c('id','created_day')]
names(user_signup_day) = c('user_id', 'created_day')
head(user_signup_day)
count_signup = as.data.frame(table(user_signup_day$created_day))
names(count_signup) = c('date', 'num')
head(count_signup)
head(count_signup[order(count_signup$date),])
head(count_signup)
ggplot(data=count_signup, aes(x=date, y=num, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=count_signup$num, size = 20),
check_overlap = TRUE,
position=position_dodge(width=0.9),
size = 8,
vjust=-1) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90))
head(count_signup)
this_month_date = c(20160304:20160331, 20160401:20160403)
ggplot(data=count_signup[count_signup$date %in% this_month_date,], aes(x=date, y=num, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=count_signup$num, size = 20),
check_overlap = TRUE,
position=position_dodge(width=0.9),
size = 8,
vjust=-1) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90))
ggplot(data=count_signup[count_signup$date %in% this_month_date], aes(x=date, y=num, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=count_signup$num, size = 20),
check_overlap = TRUE,
position=position_dodge(width=0.9),
size = 8,
vjust=-1) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90))
head(count_signup
head(count_signup)
head(count_signup)
this_month_date = c(20160304:20160331, 20160401:20160403)
ggplot(data=count_signup[count_signup$date %in% this_month_date, ], aes(x=date, y=num, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=count_signup$num, size = 20),
check_overlap = TRUE,
position=position_dodge(width=0.9),
size = 8,
vjust=-1) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90))
count_signup[count_signup$date %in% this_month_date, ]
ggplot(data=count_signup[count_signup$date %in% this_month_date, ], aes(x=date, y=num, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=count_signup$num, size = 20),
check_overlap = TRUE,
position=position_dodge(width=0.9),
size = 8,
vjust=-1) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90))
count_signup_this_month = count_signup[count_signup$date %in% this_month_date, ]
ggplot(data=count_signup_this_month, aes(x=date, y=num, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=count_signup$num, size = 20),
check_overlap = TRUE,
position=position_dodge(width=0.9),
size = 8,
vjust=-1) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90))
ggplot(data=count_signup_this_month, aes(x=date, y=num, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=count_signup_this_month$num, size = 20),
check_overlap = TRUE,
position=position_dodge(width=0.9),
size = 8,
vjust=-1) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90))
monthly_user
names(monthly_user) = c('date', 'num')
ggplot(data=monthly_user, aes(x=date, y=num, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=monthly_user$num, size = 20),
check_overlap = TRUE,
position=position_dodge(width=0.9),
size = 8,
vjust=-1) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90))
consolidate_table = merge(x = count_signup_this_month, y = monthly_user, by="date", all.y = TRUE)
consolidate_table
names(consolidate_table) = c('date', 'signup', 'visit')
consolidate_table$rate = round((consolidate_table$num / consolidate_table$users) * 100, 2)
consolidate_table$rate = round((consolidate_table$signup / consolidate_table$visit) * 100, 2)
consolidate_table
consolidate_table = consolidate_table[-c(1),]
ggplot(data=consolidate_table, aes(x=signup, y=visit, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=consolidate_table$rate, size = 15),
check_overlap = TRUE,
position=position_dodge(width=0.9), vjust=-1) +
theme(text = element_text(size=14),
axis.text.x = element_text(angle=90))
ggplot(data=consolidate_table, aes(x=date, y=rate, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=consolidate_table$rate, size = 15),
check_overlap = TRUE,
position=position_dodge(width=0.9), vjust=-1) +
theme(text = element_text(size=14),
axis.text.x = element_text(angle=90))
ggplot(data=consolidate_table, aes(x=date, y=rate, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=consolidate_table$rate, size = 15),
check_overlap = TRUE,
position=position_dodge(width=0.9), vjust=-1) +
theme(text = element_text(size=14),
axis.text.x = element_text(angle=90))
ggplot(data=consolidate_table, aes(x=date, y=rate, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=consolidate_table$rate, size = 15),
check_overlap = TRUE,
position=position_dodge(width=0.9),
size = 8,
vjust=-1) +
theme(text = element_text(size=14),
axis.text.x = element_text(angle=90))
ggplot(data=consolidate_table, aes(x=date, y=rate, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=consolidate_table$rate, size = 15),
check_overlap = TRUE,
position=position_dodge(width=0.9),
size = 8,
vjust=-1) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90))
ggplot(data=consolidate_table, aes(x=date, y=rate, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=paste(consolidate_table$rate,'%'), size = 15),
check_overlap = TRUE,
position=position_dodge(width=0.9),
size = 8,
vjust=-1) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90))
source('~/beproapp-analytics/[model] Rmysql.R', echo=TRUE)
source('~/beproapp-analytics/[model] Rmysql.R', echo=TRUE)
source('~/beproapp-analytics/[module] refine_data.R', echo=TRUE)
tw_date = c(20160404:201604010)
library(bigrquery)
tw_full_sql = paste(sql, connect_query_table(tw_date), 'where structPayload.eventData.type == "click" or
structPayload.eventData.type == "swipe" or
structPayload.eventData.type == "touch" or
structPayload.eventData.type == "view"')
tw_full_sql = paste(sql, connect_query_table(tw_date), 'where structPayload.eventData.type == "click" or
structPayload.eventData.type == "swipe" or
structPayload.eventData.type == "touch" or
structPayload.eventData.type == "view"')
tw_date = c(20160404:20160410)
tw_full_sql = paste(sql, connect_query_table(tw_date), 'where structPayload.eventData.type == "click" or
structPayload.eventData.type == "swipe" or
structPayload.eventData.type == "touch" or
structPayload.eventData.type == "view"')
tw_rawtable = query_exec(tw_full_sql, project, max_pages = Inf)
names(tw_rawtable) = c('time', 'ngClick', 'page_url', 'event_type', 'user_id', 'user_agent')
tw_event_table = tw_rawtable[order(tw_rawtable$user_id, tw_rawtable$time, decreasing = TRUE),]
lw_date = c(20160328:20160331, 20160401:20160403)
lw_full_sql = paste(sql, connect_query_table(lw_date), 'where structPayload.eventData.type == "click" or
structPayload.eventData.type == "swipe" or
structPayload.eventData.type == "touch" or
structPayload.eventData.type == "view"')
lw_rawtable = query_exec(lw_full_sql, project, max_pages = Inf)
names(lw_rawtable) = c('time', 'ngClick', 'page_url', 'event_type', 'user_id', 'user_agent')
lw_event_table = lw_rawtable[order(lw_rawtable$user_id, lw_rawtable$time, decreasing = TRUE),]
all_month_date = c(20160315:20160331, 20160401:20160410)
month_sql = 'select metadata.timestamp, structPayload.userId, from '
all_month_full_sql = paste(month_sql, connect_query_table(all_month_date))
all_month_rawtable = query_exec(all_month_full_sql, project, max_pages = Inf)
names(all_month_rawtable) = c('time', 'user_id')
all_month_event_table = all_month_rawtable[order(all_month_rawtable$user_id, all_month_rawtable$time, decreasing = TRUE),]
library('dplyr')
library('ggplot2')
extract_date_from_rawtable = function(x) {
y = strsplit(as.character(x), ' ')[[1]]
z = strsplit(as.character(y), '-')[[1]]
paste0(z[1], z[2], z[3])
}
all_month_event_table$date = sapply(all_month_event_table$time, function(x) extract_date_from_rawtable(x))
all_month_event_table$date = sapply(all_month_event_table$time, function(x) extract_date_from_rawtable(x))
nrow(all_month_event_table)
extract-date_from_rawtable(all_month_event_table$time)
extract-date_from_rawtable(all_month_event_table$time[1])
extract_date_from_rawtable(all_month_event_table$time[1])
head(all_month_event_table)
all_month_event_table$date = sapply(all_month_event_table$time, function(x) extract_date_from_rawtable(x))
month_active_user = all_month_event_table[, c('user_id', 'date')]
month_active_user = month_active_user[!duplicated(month_active_user), ]
month_active_user = month_active_user[order(month_active_user$date),]
this_week_date = c(20160403:20160410)
MAU = nrow(as.data.frame(table(month_active_user$user_id))) / nrow(valid_user)
WAU = nrow((table(month_active_user[month_active_user$date %in% this_week_date,]))) / nrow(valid_user)
Avg.DAU = mean(as.data.frame(table(month_active_user[month_active_user$date %in% this_week_date,]$date))$Freq) / nrow(valid_user)
min.DAU = min(as.data.frame(table(month_active_user[month_active_user$date %in% this_week_date,]$date))$Freq)
max.DAU = max(as.data.frame(table(month_active_user[month_active_user$date %in% this_week_date,]$date))$Freq)
MAU
WAU
Avg.DAU
min.DAU
max.DAU
nrow(as.data.frame(table(month_active_user$user_id)))
nrow((table(month_active_user[month_active_user$date %in% this_week_date,])))
WAU
Avg.DAU
min.DAU
max.DAU
min.DAU = min(as.data.frame(table(month_active_user[month_active_user$date %in% this_week_date,]$date))$Freq) / nrow(valid_user)
max.DAU = max(as.data.frame(table(month_active_user[month_active_user$date %in% this_week_date,]$date))$Freq) / nrow(valid_user)
min.DAU
max.DAU
mean(as.data.frame(table(month_active_user[month_active_user$date %in% this_week_date,]$date))$Freq)
monthly_user = as.data.frame(table(month_active_user$date))
names(monthly_user) = c('date', 'num')
ggplot(data=monthly_user, aes(x=date, y=num, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=monthly_user$num, size = 20),
check_overlap = TRUE,
position=position_dodge(width=0.9),
size = 8,
vjust=-1) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90))
extract_date_from_created = function(x) {
y = strsplit(as.character(x), ' ')[[1]][1]
z = strsplit(as.character(y), '-')[[1]]
paste0(z[1], z[2], z[3])
}
user_data$created_day = sapply(user_data$created, function(x) extract_date_from_created(x))
user_signup_day = user_data[, c('id','created_day')]
names(user_signup_day) = c('user_id', 'created_day')
count_signup = as.data.frame(table(user_signup_day$created_day))
names(count_signup) = c('date', 'num')
this_month_date = c(20160304:20160331, 20160401:20160403)
count_signup_this_month = count_signup[count_signup$date %in% this_month_date, ]
ggplot(data=count_signup_this_month, aes(x=date, y=num, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=count_signup_this_month$num, size = 20),
check_overlap = TRUE,
position=position_dodge(width=0.9),
size = 8,
vjust=-1) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90))
this_month_date = c(20160311:20160331, 20160401:20160410)
count_signup_this_month = count_signup[count_signup$date %in% this_month_date, ]
ggplot(data=count_signup_this_month, aes(x=date, y=num, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=count_signup_this_month$num, size = 20),
check_overlap = TRUE,
position=position_dodge(width=0.9),
size = 8,
vjust=-1) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90))
consolidate_table = merge(x = count_signup_this_month, y = monthly_user, by="date", all.y = TRUE)
names(consolidate_table) = c('date', 'signup', 'visit')
consolidate_table$rate = round((consolidate_table$signup / consolidate_table$visit) * 100, 2)
consolidate_table = consolidate_table[-c(1),]
ggplot(data=consolidate_table, aes(x=date, y=rate, group=1)) +
geom_line() +
geom_point() +
geom_text(aes(label=paste(consolidate_table$rate,'%'), size = 15),
check_overlap = TRUE,
position=position_dodge(width=0.9),
size = 8,
vjust=-1) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90))
tw_userid_list = as.data.frame(table(tw_event_table$user_id))
lw_userid_list = as.data.frame(table(lw_event_table$user_id))
names(tw_userid_list) = names(lw_userid_list) = c('user_id', 'freq')
tw_userid_list$week = 'tw'
lw_userid_list$week = 'lw'
week_userid_list = rbind(tw_userid_list, lw_userid_list)
week_userid_list = week_userid_list[, -2]
week_userid_list[order(week_userid_list$user_id), ]
dupRows = dupsBetweenGroups(week_userid_list, 'week')
week_userid_list = cbind(week_userid_list, dup = dupRows)
tw_userid_list = subset(week_userid_list, week=='tw', select = -week)
lw_userid_list = subset(week_userid_list, week=='lw', select = -week)
round(nrow(lw_userid_list[lw_userid_list$dup==TRUE,]) / nrow(lw_userid_list)* 100, 2)
tw_retention = subset(tw_userid_list, dup==TRUE)
tw_not_retention = subset(tw_userid_list, dup==FALSE)
merge_day_retention = merge(x = tw_not_retention, y = user_signup_day, by = 'user_id')
merge_day_retention = merge_day_retention[order(merge_day_retention$created_day),]
nrow(tw_userid_list)
tw_new_user = merge_day_retention[merge_day_retention$created_day %in% c('03-28', '03-29', '03-30', '03-31', '04-01', '04-02', '04-03'),]
tw_new_user_rate = round((nrow(tw_new_user) / nrow(tw_userid_list)) * 100, 2)
tw_retention_rate = round(nrow(tw_retention) / nrow(tw_userid_list) * 100, 2)
tw_return_rate = round((nrow(tw_not_retention)-nrow(tw_new_user)) / nrow(tw_userid_list) *100, 2)
sapply(tw_new_user[tw_new_user$created_day=='03-29', 'user_id'], function(x) player_team(x))
tw_new_user_rate
tw_retention_rate
tw_return_rate
head(merge_day_retention)
tw_new_user = merge_day_retention[merge_day_retention$created_day %in% c(20160404:20160410),]
tw_new_user_rate = round((nrow(tw_new_user) / nrow(tw_userid_list)) * 100, 2)
tw_new_user_rate
tw_retention_rate
tw_return_rate
tw_new_user = merge_day_retention[merge_day_retention$created_day %in% c(20160404:20160410),]
tw_new_user_rate = round((nrow(tw_new_user) / nrow(tw_userid_list)) * 100, 2)
tw_retention_rate = round(nrow(tw_retention) / nrow(tw_userid_list) * 100, 2)
tw_return_rate = round((nrow(tw_not_retention)-nrow(tw_new_user)) / nrow(tw_userid_list) *100, 2)
tw_new_user_rate
tw_retention_rate
tw_return_rate
tw_new_user = merge_day_retention[merge_day_retention$created_day %in% c(20160404:20160410),]
tw_new_user_rate = round((nrow(tw_new_user) / nrow(tw_userid_list)) * 100, 2)
tw_retention_rate = round(nrow(tw_retention) / nrow(tw_userid_list) * 100, 2)
tw_return_rate = round((nrow(tw_not_retention)-nrow(tw_new_user)) / nrow(tw_userid_list) *100, 2)
tw_new_user_rate
tw_retention_rate
tw_return_rate
43.56+40.31+16.13
tw_click_event = tw_event_table[tw_event_table$event_type == 'click',]
tw_count_click_event = as.data.frame(table(tw_click_event$ngClick))
names(tw_count_click_event) = c('event', 'freq')
tw_count_click_event = tw_count_click_event[order(-tw_count_click_event$freq),]
write.table(tw_count_click_event$event, file = 'tw_count_click_event', row.names = FALSE, fileEncoding = 'UTF-8')
setwd('beproapp-analytics')
head(tw_count_click_event)
head(tw_event_table)
head(tw_click_event)
head(tw_count_click_event)
tw_count_click_event[1:20]
tw_count_click_event[1:20,]
tw_event_table[tw_event_table$event_type == 'view', tw_event_table$page_url == '/feed']
head(tw_event_table[tw_event_table$event_type == 'view', tw_event_table$page_url == '/feed'])
tw_event_table[tw_event_table$event_type == 'view', tw_event_table$page_url == '/feed',]
tw_event_table[tw_event_table$event_type == 'view' & tw_event_table$page_url == '/feed',]
subset(tw_event_table, event_type == 'view')
subset(tw_event_table, event_type == 'view', page_url == '/feed')
subset(tw_event_table, event_type == 'view' & page_url == '/feed')
head(tw_event_table[which(tw_event_table$event_type == 'view' & tw_event_table$page_url == '/feed'),])
tw_event_table[which(tw_event_table$event_type == 'view' & tw_event_table$page_url == '/feed'),]
tw_click_event = tw_event_table[tw_event_table$event_type == 'view',]
tw_click_event = tw_event_table[tw_event_table$event_type == 'click',]
tw_view_event = tw_event_table[tw_event_table$event_type == 'view',]
tw_view_event[1:20,]
tw_view_event[tw_view_event$page_url == '/media/videos/20']
tw_view_event[tw_view_event$page_url == '/media/videos/20',]
tw_view_event = tw_event_table[tw_event_table$event_type == 'view',3]
tw_view_event[,3]
tw_view_event[,2]
tw_view_event[1:20,2]
tw_view_event = tw_event_table[tw_event_table$event_type == 'view',]
tw_view_event[1:20,2]
tw_view_event[1:20,3]
tw_view_event[1:30,3]
tw_view_event[1:100,3]
table(tw_view_event$page_url)
as.data.frame(table(tw_view_event$page_url))
query_video = dbSendQuery(con, 'select * from bepro_api.media_video;')
video_data = fetch(query_video, n = -1)
readable_video_id = function(video_id) {
video_name = video_data[video_data$id==video_id, 'title']
video_name
}
as.data.frame(table(tw_view_event$page_url))
as.data.frame(table(tw_view_event$page_url))[1969:2004,]
as.data.frame(table(tw_view_event$page_url))[1968:2004,]
help('grep')
video_regex = grep('*video*')
video_regex = grep('*video*', tw_view_event$page_url)
video_regex
class(video_regex)
tw_view_event[video_regex,]
tw_view_event[video_regex,3]
tw_view_event[video_regex,c('page_url', 'user_id')]
readable_video_id(43)
readable_video_id(42)
readable_video_id(11)
readable_user_id(11)
readable_user_id(10044)
video_table = tw_view_event[video_regex,c('page_url', 'user_id')]
unique(tw_event_table$user_id)
class(unique(tw_event_table$user_id))
unique(lw_event_table$user_id) %in% unique(tw_event_table$user_id)
unique(tw_event_table$user_id) %in% unique(lw_event_table$user_id)
tw_event_table$user_id[unique(tw_event_table$user_id) %in% unique(lw_event_table$user_id)]
which(unique(tw_event_table$user_id) %in% unique(lw_event_table$user_id))
a = c(1:10)
b = c(9:20)
a %in% b
a[a %in% b]
tw_user = unique(tw_event_table$user_id)
lw_user = unique(lw_event_table$user_id)
tw_user[tw_user %in% lw_user]
nrow(tw_user[tw_user %in% lw_user])
count(tw_user[tw_user %in% lw_user])
char(tw_user[tw_user %in% lw_user])
class(tw_user[tw_user %in% lw_user])
nchar(tw_user[tw_user %in% lw_user])
length(tw_user[tw_user %in% lw_user])
round(nrow(tw_retention) / nrow(tw_userid_list)
round(nrow(tw_retention) / nrow(tw_userid_list))
nrow(tw_retention)
retention_user = tw_user[tw_user %in% lw_user]
video_table[video_table$user_id %in% retention_user,]
nrow(video_table[video_table$user_id %in% retention_user,])
nrow(video_table)
video_watched_by_retention = video_table[video_table$user_id %in% retention_user,]
unique(video_watched_by_retention$user_id)
unique(video_table$user_id)
unique(video_watched_by_retention$user_id) / unique(video_table$user_id)
length(unique(video_watched_by_retention$user_id)) / length(unique(video_table$user_id))
length(unique(video_watched_by_retention$user_id)) / length(retention_user)
